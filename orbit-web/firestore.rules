rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Posts
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.author.uid == request.auth.uid ||
        // Allow users to update likes array
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy'])
      );
      allow delete: if isAuthenticated() && resource.data.author.uid == request.auth.uid;
    }

    // Comments
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.author.uid == request.auth.uid;
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Allow users to manage conversations they are part of
    match /conversations/{conversationId} {
      allow read: if request.auth != null && resource.data.participants.hasAny([request.auth.uid]);
      allow create: if request.auth != null 
        && request.resource.data.participants.hasAll([request.auth.uid])
        && request.resource.data.participants.size() == 2
        && request.resource.data.keys().hasAll(['participants', 'participantDetails', 'createdAt', 'lastMessageAt']);
      allow update: if request.auth != null 
        && resource.data.participants.hasAny([request.auth.uid])
        && request.resource.data.participants.hasAll(resource.data.participants);
    }

    // Allow users to read and send messages in conversations they are part of
    match /messages/{messageId} {
      allow read: if request.auth != null 
        && get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants.hasAny([request.auth.uid]);
      allow create: if request.auth != null 
        && get(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)).data.participants.hasAny([request.auth.uid])
        && request.resource.data.senderId == request.auth.uid
        && request.resource.data.keys().hasAll(['conversationId', 'senderId', 'text', 'createdAt']);
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 